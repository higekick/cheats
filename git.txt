■add
git add -i
対話的にステージングするファイルを選べる。

以下にステージングしたい場合はu, 終了したい場合はqなどコマンドを打ち込む
What now>
uの後、ファイルの番号を打ち込む
ステージングされたものには*がつく。

■commit
直前のcommitコメントを変更する
$ git commit --amend

commitをまとめる
$ git rebase -i HEAD~~~

リモートのコミットを取り消したい場合

http://tmtms.hatenablog.com/entry/20101221/git

■cherry-pick
 git cherry-pick [リビジョン番号]

■ブランチ
ブランチを作成してチェックアウト
$ git checkout -b hoge

リモートリポジトリをチェックアウト
$ git checkout hoge

いらなくなったブランチを削除(ローカル)
$ git branch -d foo

リモートのブランチを削除(削除したローカルをpushする)
$ git push origin :test

削除したリモートブランチを復活させる。(誤って削除した場合などに)
$ git branch {救済したいbranch名} {コミットのハッシュ}

リモートの一覧
$ git branch --remote

ローカルブランチ名を変更
$git branch -m hoge foo

■push
$ git push origin hoge

ローカルでリモートを上書き(rebaseしてコミットをまとめた後、リモートにもそのまま反映させたい場合)
$ git push -f origin hoge

■スタッシュ
スタッシュ一覧
$ git stash list

名前を付けてstash
$git stash save [message]

スタッシュの中身表示 一覧から表示されたスタッシュ名を指定
$ git stash show stash@{0}

スタッシュを適用
$ git stash apply stash@{0}

スタッシュをファイル単位で適用
$ git stash apply stash@{0} fuaga.java

スタッシュを削除
git stash drop stash@{N} # N番目のスタッシュを削除

一部だけstashしたい場合
# A.txt, B.txt, C.txtのうち、B.txtだけstashしたいという場合

# (1) stashしたいファイル以外をコミット(ローカルだけ)
git add A.txt
git add C.txt
git commit -m '一時コミット(resetする)'

# (2) stashしたいファイルだけが残った状態でgit stash
git stash

# (3) 直前のコミットを取り消す
git reset HEAD~

■リベース

リベース後、リモートにプッシュ
$ git push --force origin step3_dialog_ad :step3_dialog_ad

リベースを元に戻す
$ git reset --hard ORIG_HEAD

■マージ
マージ checkout master後、masterにhogeをマージ
$ git merge hoge

- マージを取り消す(revertする)

branchAをdevelopへマージしたコミットをrevertしたい。

まずマージしたSHAを確認する。
$ git log --graph
* commit 882d0019687e296d6521739e1d652e78015f4bbf
| Author: ikegami <ikegami@aaaa.com>
| Date:   Thu Jun 29 09:47:21 2017 +0900
|
|     branchB
|     - 何かしらcommit
|
*   commit 52a3556952c543470f6fad0e83556664ac13b573
|\  Merge: e4c312046 8debc1da1
| | Author: ikegami <ikegami@aaaa.com>
| | Date:   Wed Jun 28 18:44:59 2017 +0900
| |
| |     Merge branch 'branchA' into develop
| |     - SDKを上げた対応をマージ
| |
| * commit 8debc1da1b12d0dc79bd2db06f9056b1b4cbd40e
| | Author: ikegami <ikegami@aaaa.com>
| | Date:   Wed Jun 28 15:25:22 2017 +0900
| |
| |     - アイコン表示を調整

52a355695が取り消したいマージコミットである。
Merge: の欄のe4c312046と8debc1da1が親コミットでdevelop側のe4c312046を残したい。
親commitの左側(1を指定する。)
その場合は
$ git revert -m 1 52a355695

タグをつける
$ git tag hoge-1.8.64

コメント付きタグ
$ git tag -a hoge-1.8.65

タグのpush
$ git push --tags

ローカルのタグ一覧
$ git tag -n

リモートのタグ一覧
$ git ls-remote --tags

タグを消す(ローカル)
$ git tag -d TAGNAME

タグを消す(リモート)
$ git push origin :TAGNAME

■Git Flow
SourceTreeからリリース作業(masterにタグ付けを行う作業)

1. 右上のGit Flowを押下し、「新規リリースを開始」
 リリース名にタグと同じ名前を記載する
  > developと同じ位置にrelease/リリース名のブランチができる

2. 右上のGit Flowを押下し、「リリースを完了」
　「次のメッセージでタグ」にタグにつけたいメッセージを記載
　  > releaseブランチは削除され、masterにマージされて完了
   tagのコメントの修正が必要な場合
 （SourceTreeのGitGlowだとなぜかコメントが一行しかつけなれなそうなので以下で一旦消してvimでやりながらの方がいいかも）
   $ git tag -d <タグ名> // 一回消して
   $ git tag -a <タグ名> master // エディタが表示されメッセージを付けられる

3. masterとtagをリモートにpushしておしまい
  $ git push origin master
  $ git push origin <tagname>

■msys2にgit flowをインストール
$ pacman -S git-flow

■diff
タグ間の差分でjavaファイルだけ見たい時
$ git diff jorte-1.8.65 jorte-1.8.66 --diff-filter= *.java

名前だけ見たい時は--name-onlyをつける
$ git diff jorte-1.8.65 jorte-1.8.66 --name-only --diff-filter= *.java

差分の中から搾りたい場合は-S"keyword"をつける
$ git diff jorte-1.8.65 jorte-1.8.66 -S"draw" --name-only --diff-filter= *.java

直前のcommitの差分を見る。(最新commitとその一つ前)
$ git diff HEAD~..HEAD

stageしたファイルの差分
$ git diff --cached

リモートとの差分
$ git diff origin/develop..HEAD

addした後に差分が見たい場合
$ git diff --cached ファイル名

addしたファイルをキャンセルしたい場合
$ git reset HEAD ファイル名

■元に戻す
$ git checkout

　ファイル単位で戻す
$ git checkout コミット番号 ファイルパス

ハンクごとに確認しながら戻せる
$ git checkout -p

■git rebase -i をしてcommitを整理したものを戻す

以下で操作履歴を確認
$ git reflog
c727480d7 HEAD@{0}: rebase -i (finish): returning to refs/heads/JORREQ3-640-1
c727480d7 HEAD@{1}: rebase -i (pick): JORREQ3-640
3b59d5e6b HEAD@{2}: rebase -i (squash): JORREQ3-640
2ccc68642 HEAD@{3}: rebase -i (start): checkout HEAD~3
8edf21b26 HEAD@{4}: reset: moving to HEAD
8edf21b26 HEAD@{5}: commit: JORREQ3-640

戻りたいところまで、ここではrebaseの前だからHEAD@{4}
$ git reset --hard HEAD@{4}

戻った
$ git log --pretty=oneline
8edf21b26fe82e317c18713edc742fcaed5b8ecc JORREQ3-640 - DST初日の挙動を修正 (ジョルテカレンダーのみ) -- 月表示、週表示、日表示 -- 新規予定登録時の日付と時刻表示、日付タップ、スクロール時の移動
9999d23d8ee1bb3170f99dc2ef7fd55ae629038f バーティカルも修正を試したver
2ccc68642be8413832fe61af3c706fd248c6c340 JORREQ3-640 - Timeクラスの夏時間問題
